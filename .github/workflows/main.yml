name: GraalVM CI Main

on:
  push:
  schedule:
  - cron: 50 6 21 * *
env:
  ARTIFACT: gitfx
  GRAALVM_VERSION: 21.1.0

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Dump job context
      env:
        JOB_CONTEXT: ${{ toJSON(job) }}
      run: echo "$JOB_CONTEXT"
    - name: Dump steps context
      env:
        STEPS_CONTEXT: ${{ toJSON(steps) }}
      run: echo "$STEPS_CONTEXT"
    - name: Dump runner context
      env:
        RUNNER_CONTEXT: ${{ toJSON(runner) }}
      run: echo "$RUNNER_CONTEXT"
    - name: Dump strategy context
      env:
        STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
      run: echo "$STRATEGY_CONTEXT"
    - name: Dump matrix context
      env:
        MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      run: echo "$MATRIX_CONTEXT"
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.output.outputs.new_version }}
    steps:
    - uses: actions/checkout@v2.3.4
      with:
        # fetch entire history to analyze commits since last tag
        fetch-depth: 0
    - name: Bump version and push tag
      id: tag
      if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
      uses: mathieudutour/github-tag-action@v5.5
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        release_branches: master,main
    - id: output
      env:
        NEW_VERSION: ${{ steps.tag.outputs.new_version}}
      run: |
        echo "::set-output name=new_version::${NEW_VERSION:-$GITHUB_SHA}"
  macos:
    runs-on: macos-latest
    needs: version
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Setup Graalvm
      uses: DeLaGuardo/setup-graalvm@4.0
      with:
        graalvm: ${{ env.GRAALVM_VERSION }}
        java: 'java11'
    - name: Cache Maven packages
      uses: actions/cache@v2.1.6
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven
      env:
        REVISION: ${{ needs.version.outputs.new_version }}
      run: |
        set -o xtrace
        gu install native-image
        brew install upx
        ./mvnw \
          --batch-mode \
          -Dsha1="${GITHUB_SHA}" \
          -Drevision="${REVISION}" \
          verify client:build client:package
        upx --brute "target/client/x86_64-darwin/${ARTIFACT}"
        mkdir target/artifacts
        cp "target/client/x86_64-darwin/${ARTIFACT}" "target/artifacts/${ARTIFACT}-darwin-${REVISION}"
    - uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ env.ARTIFACT }}-${{ github.job }}-${{ needs.version.outputs.new_version }}
        path: target/artifacts
  linux:
    runs-on: ubuntu-latest
    needs: version
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Setup Graalvm
      uses: DeLaGuardo/setup-graalvm@4.0
      with:
        graalvm: ${{ env.GRAALVM_VERSION }}
        java: 'java11'
    - name: Cache Maven packages
      uses: actions/cache@v2.1.6
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Install libraries
      run: sudo apt-get update && sudo apt-get install libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev
    - name: Build with Maven
      env:
        REVISION: ${{ needs.version.outputs.new_version }}
      run: |
        set -o xtrace
        wget -q https://github.com/upx/upx/releases/download/v3.96/upx-3.96-amd64_linux.tar.xz
        tar xf upx-3.96-amd64_linux.tar.xz
        gu install native-image
        ./mvnw \
          --batch-mode \
          -Dsha1="${GITHUB_SHA}" \
          -Drevision="${REVISION}" \
          verify client:build client:package
        ./upx-3.96-amd64_linux/upx "target/client/x86_64-linux/${ARTIFACT}"
        mkdir target/artifacts
        cp "target/client/x86_64-linux/${ARTIFACT}" "target/artifacts/${ARTIFACT}-linux-${REVISION}"
    - uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ env.ARTIFACT }}-${{ github.job }}-${{ needs.version.outputs.new_version }}
        path: target/artifacts
  windows:
    runs-on: windows-latest
    needs: version
    env:
      VCVARS_BAT: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Setup Graalvm
      uses: DeLaGuardo/setup-graalvm@4.0
      with:
        graalvm: ${{ env.GRAALVM_VERSION }}
        java: 'java11'
    - run: choco install upx --version=3.96 --no-progress
    - name: Cache Maven packages
      uses: actions/cache@v2.1.6
      with:
        path: .m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven
      shell: cmd
      env:
        REVISION: ${{ needs.version.outputs.new_version }}
      run: |
        call "%JAVA_HOME%\bin\gu" install native-image
        call "%VCVARS_BAT%"
        call .\mvnw --batch-mode -Dsha1="%GITHUB_SHA%" -Drevision="%REVISION%" --settings .\.github\github-actions-windows-maven-settings.xml verify client:build client:package
        upx --brute target/client/x86_64-windows/%ARTIFACT%.exe
        mkdir target\artifacts
        copy "target\client\x86_64-windows\%ARTIFACT%.exe" "target\artifacts\%ARTIFACT%-windows-%REVISION%.exe"
    - uses: actions/upload-artifact@v2.2.3
      with:
        name: ${{ env.ARTIFACT }}-${{ github.job }}-${{ needs.version.outputs.new_version }}
        path: target/artifacts
  release:
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [version, macos, linux, windows]
    steps:
    - uses: actions/checkout@v2.3.4
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./target
    - name: Build project
      working-directory: target
      run: |
        zip -r windows.zip ${ARTIFACT}-windows-${{ needs.version.outputs.new_version }}/
        zip -r linux.zip ${ARTIFACT}-linux-${{ needs.version.outputs.new_version }}/
        zip -r macos.zip ${ARTIFACT}-macos-${{ needs.version.outputs.new_version }}/
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.version.outputs.new_version }}
        release_name: Release ${{ needs.version.outputs.new_version }}
        body: ${{ needs.version.outputs.changelog }}
        draft: true
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/linux.zip
        asset_name: ${{ env.ARTIFACT }}-linux-${{ needs.version.outputs.new_version }}.zip
        asset_content_type: application/zip
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/windows.zip
        asset_name: ${{ env.ARTIFACT }}-windows-${{ needs.version.outputs.new_version }}.zip
        asset_content_type: application/zip
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/macos.zip
        asset_name: ${{ env.ARTIFACT }}-macos-${{ needs.version.outputs.new_version }}.zip
        asset_content_type: application/zip
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ steps.create_release.outputs.id }}
  deploy:
    needs: [version, macos, linux, windows]
    if: ${{ github.event_name == 'push' && !startsWith(github.ref, 'refs/heads/dependabot/') }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: Cache Maven packages
      uses: actions/cache@v2.1.6
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Publish to GitHub Packages Apache Maven
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REVISION: ${{ needs.version.outputs.new_version }}
      run: |
        ./mvnw \
          --batch-mode \
          --settings ./.github/github-packages-maven-settings.xml \
          -Dsha1="${GITHUB_SHA}" \
          -Drevision="${REVISION}" \
          -DaltDeploymentRepository="github::default::https://maven.pkg.github.com/${GITHUB_REPOSITORY}" \
          deploy
